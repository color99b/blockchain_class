gitignore : 여러 라이브러리 를 사용하게 되는데 

cmd에서 cd .. 은 뒤로가기임


dir : 폴더에 뭐가 있는지 나오는 명령어

branch : 작업대 
git branch -M 작업대이름
처음엔 보통 master 나 main 혹은 develope 로 넣음

git remote - 원격저장소 명령어 -> 처음 연결할 때 빼고는 쓸 일이 거의 없음.

git checkout - 브랜치 이동 명령어 -> git checkout -b 브랜치명 -> -b  조건을 붙여주면 없던걸 새로 만듬





한 파일을 브랜치마다 다르게 수정 저장할 수 있고 브랜치에 저장된 내용들이 다 달라서 롤백도 할 수있음
ex : master 브랜치의 tt.txt : 안녕하세요 반갑습니다
 1 브랜치의 tt.txt : 안녕하세요 반갑습니다 김영준입니다
 2 브랜치의 tt.txt : hi, nice to meet you
일때 1 브랜치 2브랜치 각각 작업하다가 다른 브랜치의 tt.txt 를 불러오면 롤백이가능 -> 수정의 분기점 생성을 브랜치에 넣어서 할 수 있음.

git merge 는 내가 들어가 있는 브랜치에 뒤에 적는 브랜치명의 브랜치를 합침.
브랜치들은 그대로 남는데 파일이 합쳐지는거임. 파일이 합쳐질때 안의 내용이 두 개 다 수정되어있으면 어떤 걸 기준으로 병합할지 결정해줘야함 안그러면 충돌.
 head가 메인 밑에는 수정한 코드 --> 이건 파일을 직접 열어서 내가 수정해주고 다시 저장한걸 add 로 넣고 커밋푸시해서 올리면 파일 병합이 된거임
 다른 사람의 브랜치에서 수정된 코드나 추가된 코드를 내 파일에 일단 붙여서 수정하고 저장할수 있음.
보통 머지는 문제가 생기면 브랜치를 따서 따로 수정을하고 수정이 완료된걸 머지함.



add 하고 commit 하고 push -> 원격저장소에 업로드
add로 수정할 파일 올릴 걸 알려주고
commit 으로 내 저장소에 저장을 하고
push 로 원격저장소에 업로드

????? = add한 브랜치는 깃의 임시 작업대 commit은 내 저장소, push 는 깃허브 저장소 인듯


pull, fetch, rebase => 파일 내려받기
fetch 하고 pull 하면 됨
git fetch git pull / 어떤 저장소의 어떤 브랜치를 받아오는지 정도를 추가문으로 설정할 수 있음 아무 조건 안붙이면 모든 브랜치 다 받아옴
fetch 는 파일이 아니라 변경되었던 내역들 (로그)를 받아옴. pull은 파일자체를 받아옴.


-------------
(깃허브데스크탑 히스토리)
파일을 수정하고 커밋하고 푸시했을때 로그에서는 원래 내용을 지우고 새로 그 내용을 다시쓰는데
이건 줄바꿈 때문이다. 줄바꿈이 발생했기 때문에 다른 문장으로 인식해서 지우고 새로 다시 쓰는것