220823

(비NCS) 스마트 웹 프론트엔드 개발

a_audio_video 폴더

a 태그 : a 태그는 링크다.
        style 속성에 css 명령어를 선언하지 않는다.
        자식 태그로 스타일을 설정한다.
        href 속성은 ? 이동할 주소다.
        href는 기본적으로 현재 주소를 기준으로 한다. << 서버 강의 들어가면 더 정확하고
        자세하게 다루게 될 것이다.
        다른 웹페이지로 이동하고 싶으면 주소 가져다 넣으면 된다

video 태그 : video 태그는 영상을 출력하기 위해 사용한다.
        src에 주소를 입력한다. << 주소라고 하는 이유는 추후에 서버 강의 진행 할 떄 다시 설명할 예정
        현재 : 파일명을 입력한다. (폴더 경로와 파일명을 입력한다.)
        controls 속성은 영상의 컨트롤 박스를 출력시켜준다.
        autoplay 속성은 영상이 로드가 완료되면 바로 재생한다. 
        autoplay의 단점이 있다 << 욕나옴 >>
        웹페이지를 들어갔을 떄 오디오가 바로 나오면 안되는게 권장 사항이다. >> IOS가 이걸 정말 빡세게 따져.... << 따라서, 자동 재생이 안된다.
        loop 속성은 말 그대로 반복하는 명령어 이다.
        mute 속성은 이름 그대로 음소거를 줄 수 있는 명령어 이다. << IOS에서 중요.

audio 태그 : audio 태그는 음악을 재생하는 태그이다. 속성은 = video
        autoplay 는 아무 출력창 없이 배경음악 처럼 재생하기 위한 명령어이다.
        controls 속성은 재생 on/off를 할 수 있는 창을 출력하는 명령어 이다.

        태그의 속성은 이름만 넣을 경우 값을 true로 설정한다. << 참거짓(true/false)의 값을 속성은 이름만 으로 처리가 가능하다.
        이름만 넣을 수도 있는 속성들은 기본값이 거짓(false) 이다. << 기본값이라는 건 설정 자체를 안했을 때(속성의 이름 자제도 아예 안넣었을 떄)
        예를 들어
        <audio src="./goldn-116392.mp3"></audio> << controls, autoplay .. 등 속성을 아예 안넣을 떄, 설정을 안했다. 기본값이다.
        <audio src="./goldn-116392.mp3" controls></audio> << controls 속성을 설정하겠다. 그런데 값을 알아서 넣어라 -> 즉, 설정값이 true가 된다.

style 태그 : 태그들의 스타일 속성을 모아뒀다. 미리 설정 한다.
        style 태그 내에서 쓰는 문법(방식)은 CSS 작성 방식과 같게 사용한다.
        div, body, h1 등의 태그에 스타일을 한번에 적용할 수 있다.
    *{} : * 은 모든 태그에 적용한다.
            여러 곳에서 * 이 사용 될 수 있으며 CSS 문법에서는 모든 태그에 설정 할 때 사용한다.
    #{} : #은 태그의 id 속성명을 찾아 style을 적용한다.
    .{} : .은 태그의 class 속성명을 찾아 style을 적용한다.

class : class 는 이름 그대로 반이다. << 라고 생각하면 편하다
        여러 태그들에게 공통된 속성이나 공통된 태그라면 class 속성을 설정하여
        한번에 처리한다.
        구조에서 하나의 태그로 묶어서 자식으로 처리해도 되지만, class로 처리하면 더 깔끔하게 볼 수 있다.

id : id는 identity << 하나만 설정 가능한 이름이다.
        태그들 끼리 중복되면 안된다.
        html 상에서는 중복 체크를 안하지만 javaScript 쓸 때 후회 한다.

<태그 class="클래스명 클래스명"> : class를 두개를 가진다.

.부모클래스명 .자식클래스명 {} : parent 클래스명을 가진 태그 자식들 중 자식클래스명을 가진 태그를 찾는다.
                                띄어쓰기는 자식을 찾는다. 모든 자식태그들에서 찾는다. (자식을 포함하여 증손자, 손자 등 모든 자식태그에서 찾는다.)

태그.클래스명{} : 해당 태그인데 클래스명을 갖고 있다.

태그#id명.클래스명 {} : 붙여서 쓴 이름은 하나의 태그에서 찾는다. 하나의 태그에 전부 있어야 찾을 수 있다.

.클래스명 , .클래스명 > .클래스명 {} : ,로 여러 클래스를 한번에 적용 가능하다
                                    >는 바로 하위(직속, 1촌) 자식만을 찾는다. (손자, 증손자 태그 등 찾지 않는다.)

.부모클래스명 자식클래스명 자식클래스명:nth-child(n) {} : 클래스명에 해당하는 부모의 자식의 자식클래스명 
						n번째에 css명령을 설정 한다.